- name: Check for binary
  ansible.builtin.stat:
    path: "{{ kodi_bin }}"
  register: kodi_bin_file

- name: Fail if Kodi is not installed
  ansible.builtin.fail:
    msg: Missing Kodi binary {{ kodi_bin }}
  when: not kodi_bin_file.stat.exists

- name: Create group
  ansible.builtin.group:
    name: "{{ kodi_group }}"
    system: true

- name: Create user
  ansible.builtin.user:
    name: "{{ kodi_user }}"
    ansible.builtin.group: "{{ kodi_group }}"
    groups: ["audio", "input", "video", "render"]
    system: true
  register: user

- name: Install service
  ansible.builtin.template:
    src: kodi.service
    dest: /etc/systemd/system/kodi.service
    mode: "0644"
  notify:
    - restart

- name: Check for initial configuration
  ansible.builtin.stat:
    path: "{{ user.home }}/.kodi"
  register: kodi_configuration_directory

- name: Create initial configuration
  ansible.builtin.systemd:
    name: kodi
    state: started
  when: not kodi_configuration_directory.stat.exists

- name: Create directories
  ansible.builtin.file:
    path: "{{ user.home }}/.kodi/{{ item }}"
    owner: "{{ kodi_user }}"
    ansible.builtin.group: "{{ kodi_group }}"
    mode: "0755"
    state: directory
  loop:
    - "{{ kodi_userdata_dir }}"
    - "{{ kodi_subtitles_dir }}"

# Kodi override configuration on stop, grr
- name: Stop service before configuration
  ansible.builtin.systemd:
    name: kodi
    state: stopped

- name: Configure sources
  ansible.builtin.template:
    src: sources.xml.j2
    dest: "{{ user.home }}/.kodi/{{ kodi_userdata_dir }}/sources.xml"
    mode: "0644"

- name: Configure advanced settings
  ansible.builtin.template:
    src: advancedsettings.xml.j2
    dest: "{{ user.home }}/.kodi/{{ kodi_userdata_dir }}/advancedsettings.xml"
    mode: "0644"

- name: Configure guisettings.xml
  community.general.xml:
    ansible.builtin.file: "{{ user.home }}/.kodi/{{ kodi_userdata_dir }}/guisettings.xml"
    xpath: "/settings/setting[@id='{{ item.id }}']"
    value: "{{ item.value }}"
  with_items: "{{ kodi_gui_settings }}"

- name: Configure guisettings.xml (drop default attributes)
  community.general.xml:
    path: "/home/kodi/.kodi/{{ kodi_userdata_dir }}/guisettings.xml"
    xpath: "/settings/setting[@id='{{ item.id }}']/@default"
    state: absent
  with_items: "{{ kodi_gui_settings }}"

- name: Configure subtitles guisettings.xml
  community.general.xml:
    ansible.builtin.file: "{{ user.home }}/.kodi/{{ kodi_userdata_dir }}/guisettings.xml"
    xpath: "/settings/setting[@id='{{ item.id }}']"
    value: "{{ item.value }}"
  with_items: "{{ kodi_subtitles_gui_settings }}"

- name: Configure subtitles guisettings.xml (drop default attributes)
  community.general.xml:
    path: "/home/kodi/.kodi/{{ kodi_userdata_dir }}/guisettings.xml"
    xpath: "/settings/setting[@id='{{ item.id }}']/@default"
    state: absent
  with_items: "{{ kodi_subtitles_gui_settings }}"

- name: Start service after configuration
  ansible.builtin.systemd:
    name: kodi
    state: started
    enabled: yes
